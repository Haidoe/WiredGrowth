type User {
    _id: ID
    username: String!
    email: String!
    password: String!
    avatar: String
    joinDate: String!
    isActivated: Boolean
}

type Campus {
    _id: ID
    campus: String!
}

type Task {
    _id: ID
    task: String!
    description: String
}

type Team {
    _id: ID
    team: String!
    description: String
}

type AttendanceStatus {
    _id: ID
    status: String!
    description: String!
}

type Attendance {
    _id: ID
    user: Attendee!
    team: Team!
    task: Task
    campus: Campus!
    attendanceStatus: AttendanceStatus!
    createdBy: User!
    date: String!
}

type Attendee {
    _id: ID
    firstName: String!
    lastName: String!
    joinDate: String!
}

type Token {
    token: String!
}

type Query {
    getUsers: [User]
    getTeams: [Team]
    getTasks: [Task]
    getCampuses: [Campus]
    getAttendanceStatus: [AttendanceStatus]
    getCurrentUser: User
    getAttendees: [Attendee]
}

type Mutation {
    signupUser(username: String!, email: String!, password: String!): Token
    signinUser(username: String!, password: String!): Token
    addAttendanceStatus(
        status: String!
        description: String!
    ): AttendanceStatus!
    addTask(task: String!, description: String): Task!
    addTeam(team: String!, description: String): Team!
    addAttendance(
        user: ID!
        team: ID!
        task: ID
        campus: ID!
        attendanceStatus: ID!
        createdBy: ID!
        date: String
    ): Attendance!

    addAttendee(
        firstName: String!
        lastName: String!
        joinDate: String
    ): Attendee!
    editAttendee(
        attendeeId: ID
        firstName: String
        lastName: String
        joinDate: String
    ): Attendee!
    deleteAttendee(attendeeId: ID): Attendee!

    addCampus(campus: String!): Campus!
    editCampus(campusId: ID, campus: String!): Campus!
    deleteCampus(campusId: ID): Campus!
}
